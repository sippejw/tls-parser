mod tls_rsa {
    use tls_parser::*;

    #[rustfmt::skip]
static RSA_PARAMS: &[u8] = &[
    0x00, 0x40, 0xa8, 0xc5, 0xcb, 0x9a, 0xaa, 0x6c,
    0xe5, 0xe9, 0x04, 0x7e, 0xe6, 0x01, 0x84, 0xa4,
    0x81, 0x7c, 0xed, 0x86, 0xda, 0x37, 0x9f, 0x6d,
    0xbf, 0x00, 0xf6, 0x44, 0xe5, 0xc2, 0xd4, 0x10,
    0x5d, 0x90, 0xf3, 0x7d, 0x3f, 0x17, 0x81, 0xb0,
    0xc5, 0x2f, 0xa6, 0x0c, 0xf9, 0x76, 0x7d, 0xc4,
    0x32, 0xc5, 0x66, 0x29, 0xd4, 0x5f, 0x62, 0x44,
    0xc6, 0xf8, 0x33, 0x96, 0x27, 0x9d, 0x44, 0xc9,
    0x37, 0x89, 0x00, 0x03, 0x01, 0x00, 0x01, 0x02,
    0x01, 0x00, 0x80, 0x60, 0x89, 0x48, 0x3a, 0xea,
    0xcf, 0xee, 0x59, 0xd1, 0x9a, 0x1d, 0x01, 0x85,
    0x8b, 0x17, 0x32, 0x19, 0x3d, 0xcd, 0x66, 0xfe,
    0x63, 0xb7, 0xb6, 0x73, 0xce, 0x17, 0x29, 0x6e,
    0x19, 0x5b, 0x6e, 0x07, 0x8f, 0x2c, 0x69, 0x9d,
    0xde, 0x20, 0x29, 0x1a, 0xcb, 0xb8, 0x58, 0xcb,
    0xe7, 0x0e, 0xf7, 0xc7, 0xbc, 0x7b, 0x98, 0xc5,
    0x3b, 0x03, 0xae, 0x32, 0xfe, 0xe9, 0xb3, 0x04,
    0x61, 0x0f, 0x76, 0x78, 0xec, 0x04, 0xe3, 0x03,
    0x15, 0xf3, 0xd1, 0xa8, 0xca, 0x45, 0xbf, 0x64,
    0xa4, 0xdc, 0xd3, 0x3e, 0xfd, 0xa6, 0x77, 0x03,
    0x87, 0xcf, 0x8a, 0xe8, 0x13, 0xc2, 0xcc, 0x6b,
    0xe5, 0xa0, 0x52, 0x88, 0xf5, 0xd3, 0x55, 0xe0,
    0x7f, 0xf7, 0x62, 0x9a, 0x86, 0x2b, 0xad, 0x2a,
    0x1e, 0xf0, 0x4a, 0x7b, 0x85, 0x9a, 0x09, 0xf9,
    0x30, 0x35, 0x54, 0x4c, 0x8a, 0x41, 0x14, 0x1a,
    0xc9, 0x51, 0x23
];

    #[test]
    fn test_tls_rsa_params() {
        let bytes = RSA_PARAMS;
        let modulus = &bytes[2..66];
        let exponent = &bytes[68..71];
        let expected1 = ServerRSAParams {
            modulus,
            exponent,
        };
        let expected2 = &bytes[71..];
        let res = parse_rsa_params(bytes);
        assert_eq!(res, Ok((expected2, expected1)));
    }

} 
